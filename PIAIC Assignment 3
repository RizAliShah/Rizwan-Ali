pragma solidity ^0.8.0;
interface IERC20 {
    
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract PiaicToken is IERC20{
    string public constant name = "MyERC20Token";
    string public constant symbol = "MET";
    uint8 public constant decimals = 16;
    
    address public Owner;
    uint private _tSupply;
    mapping (address => uint) public balance;
    mapping (address => mapping (address => uint)) public Allowance;
    
    constructor(){
        _tSupply = 1000000 * 10 ** decimals; // 1 million token has been generated
        Owner = msg.sender;
        balance[Owner] = _tSupply;
    }
    
    function totalSupply() external override view returns (uint){
        return _tSupply;
    }
    
    function balanceOf(address tokenOwner) external override view returns(uint){
        return balance[tokenOwner]; 
    }   
    
    function transfer(address recipient, uint amount) external override returns (bool){
        require (amount <= balance[msg.sender], "No. of transfer Tokens must be less than or equal to total Tokens");
        balance[recipient] += amount;
        balance[msg.sender] -= amount;
        
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function approve(address spender, uint amount) external override returns (bool){
        require(amount <= balance[msg.sender],"transfer Token must be less than from total available");
        
        Allowance[msg.sender][spender] = amount;
        
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    function allowance(address owner, address spender) external override view returns(uint){
        return Allowance[owner][spender];
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){
        require(amount <= Allowance[sender][msg.sender],"Transfer Token must be less than or equal to the total Approve Tokens");
        require(amount <= balance[sender],"Transfer Token must be less than or equal to the total Approve Tokens");
        
        Allowance[sender][msg.sender] -= amount;
        balance[sender] -= amount;
        balance[recipient] += amount;
        
        emit Transfer(sender, recipient, amount);
        return true;
        
    }
}

contract MyToken is PiaicToken{
    PiaicToken public Token; 
    uint token_price = 1 * 10 ** 16;    // price of the individual token
    constructor(){
     Token = new PiaicToken();   
    }
    
    receive() external payable{
        
        uint token_purchased = msg.value/token_price;
        Token.transfer(msg.sender, token_purchased);
        
        balance[msg.sender] += token_purchased;
        balance[Owner] -= token_purchased;
        
    } 
    
    function Adjust_Token_Price (uint newPrice) public returns (bool){
        require(msg.sender == Owner, "Only Owner can change the price of the Token");
        token_price = newPrice;
        return true;
    }
}
